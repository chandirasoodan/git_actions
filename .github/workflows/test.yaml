# This is a basic workflow to help you get started with Actions

name: Demo-deployment

# Controls when the workflow will run
on: workflow_dispatch
env:
  # Setting an environment variable with the value of a configuration variable
  ACCESS_KEY: ${{ vars.ACCESS_KEY }}
  SECRET_KEY: ${{ vars.SECRET_KEY }}
  TOKEN: ${{ vars.TOKEN }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  sonar-scan:
    name: sonar-scan
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube Quality Gate Check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        continue-on-error: false
          
  approval:
    needs: sonar-scan
    runs-on: self-hosted
    environment:
      name: Approvers
    if: failure()  # Runs only if SonarQube check fails
    steps:
      - name: Notify for Manual Approval
        run: |
          if [[ "${{ needs.sonar-scan.result }}" == "failure" ]]; then
            echo "Approval required due to SonarQube failure."
          else
            echo "No approval needed, proceeding..."
          fi
  
  Docker-push:
      # The type of runner that the job will run on
      needs: approval
      runs-on: self-hosted
  
      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v4
        - name: Run a multi-line script
          run: |
            sudo apt-get update
            pwd
            ls -lrt
            sudo docker login -u "${{ secrets.DOCKER_USER }}" -p "${{ secrets.DOCKER_SECRET }}"
            sudo docker build -t "${{ secrets.DOCKER_USER }}"/database:${{ github.run_number }} ./database
            sudo docker push "${{ secrets.DOCKER_USER }}"/database:${{ github.run_number }} 
  
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    needs: Docker-push
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Run a multi-line script
        run: |
          ls -lrt
          sudo apt update
          sudo apt install ansible-core -y
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt install unzip -y
          unzip awscliv2.zip
          export ACCESS_KEY=$ACCESS_KEY
          export SECRET_KEY=$SECRET_KEY
          export AWS_ACCESS_KEY_ID=$ACCESS_KEY
          export AWS_SECRET_ACCESS_KEY=$SECRET_KEY
          echo $ACCESS_KEY
          echo $SECRET_KEY
          echo $TOKEN
          ansible --version
          ansible-playbook ./ansible.yaml --extra-vars "TOKEN=$TOKEN" -vvv
